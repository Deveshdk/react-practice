1. Bundlers :
     A bundler is a tool that takes all your JavaScript code, along with any other assets like CSS or images
     and combines them into a single file (or a few files) that can be served to the browser.
     It basically bundles your code, so that it can be pushed to production. Eg. Webpack,veet,parcel.

2. How to Install Bundlers in our project:
     npm install -D "bundlersname" eg. npm install -D parcel.
     D stands for devDependencies.

3. Caret in Version(^) :
     If put infornt of the dependency version, it will automatically update the minor version of the dependency.
      eg. "parcel": "^2.10.3"

4. Tilde in version(~) :
     If put infornt of the dependency version, it will automatically update the major version of the dependency.
      Not a very good practice.
      eg. "parcel": "~2.10.3"

5. package.json :
     It keeps all the configuration of our projects. eg. package version,liscence,git url etc.

6. package-lock.json :
     It keeps the exact version that is being installed. 
     package.json can have caret or tilde but lock.json will keep the exact version.

7. node-modules :
     It contains all the codes that npm has fetched of all the dependencies in our project. 
     It is basically a database/bundles of dependencies. Every package has its own dependencies.

8. transitive dependencties :
     eg. parcel is my dependency but dependencies that parcel depends on.

9. Build your code using parcel : npx parcel index.html    eg. npx bundler-name src-name

10. Install react and reactDOM as a package instead of injecting a cdn:
     npm i react and npm i react-dom

11. Build in production command :
     npx parcel build index.html   
     (remove the main from package.json as it will give error in production because we give the entry point while running. so it conflicts.)

12. How to add browserslist:
     Add browserslist in package.json.

13. How to use script to run the project:
    Create a script in package.json for dev and prod. eg. "scripts": {
    "start": "parcel index.html",
    "build": "parcel build index.html"
  },

14. JSX or ReactElement: 
    -   JSX is javaScript file to create ReactElement which is more developer friendly. It is convention where we merge js file with html like syntax.
    -   JSX is not HTML, it's html like syntax. JSX is not necessary to create React rather it is more developer friendly.
    -   JSX (transpiled before it reaches the JS engine) - PARCEL - BABEL
    -   JSX => React.createElement => ReactElement - JS Object => rendered => HTMLElement
    -   JSX attribute has to be camel case.
    -   Multiple line JSX can be written inside ().
    -   eg. const heading = <h1 id="heading">This is a ReactElementðŸª±</h1> instead of const heading = React.createElement("h1",{id:"heading"},"This is a ReactElementðŸª±!");
    -   We can render ReactElement by just root.render(ReactElement);
    -   JSX takes care of cross site scripting. 

15. Babel:
    -   Babel is a javaScript compiler. It can be added as a node module in our package.
    -   Babel is a transpiler that convert one peice of code to another peice of code.
    -   Babel is the one who converts JSX to JS.

16. Two types of Components:
    Functional Components
    Class based Components

    Functional Component: 
    -   It is just a normal javascript function that returns a peice of JSX code or ReactElement.
    -   Name of the component has to be in capital.
    -   Any javascript function with capital name and an arraow function ia a component.
    -   If there is ony one line of JSX element then return is not necessary.
    -   When rerurn one single ReactElement, curly brackets is used.{}
    -   eg. const HeadingComponent = () =>{
            return <h1>This is a React Functional Component</h1>
            };
    -   When we rerurn a div type ReactElement, we use small brackets.
    -   eg. const HeadingComponent = () =>(
            <div id="container">
            <h1 id="heading"> This is a Functional Component returning div type react element.</h1>
            </div>
            );
    -   We can render compnent by brackets inside render. eg. root.render(<HeadingComponent/>)

17. Component Composition :
    -   It is nothing but calling one component inside another component.
    -   eg. const HeadingComponent2 = ()=>(
            <div id="container2">
            {/* {HeadingComponent()}  or <HeadingComponent/> or <HeadingComponent></HeadingComponent> 
            we can call HeadingComponent inside curly braces as well because at the end of the day component is also a normal javascript function and
            any javascript function can be called inside curly function inside JSX */}
            <HeadingComponent />
            <h1 id="heading">We are adding one componet into another component/ Component Composition</h1>
            </div>

18. Dist Folder :
     -    Production Build Output:
          -    When you create a production build of your React application using tools like
               Create React App, Webpack, or other bundlers, the optimized and minified versions of your JavaScript, CSS,
               and other assets are generated and placed in the dist folder.

     -    Ready for Deployment: 
          -    The dist folder contains files that are optimized for deployment to a web server or hosting service.
               These optimized files have minimized file sizes, concatenated code, and other optimizations for faster loading and
               better performance in a production environment.
